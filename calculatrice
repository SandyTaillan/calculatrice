#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Pour le moment, il n'y a qu'un seul fichier.
# Le setupUi n'est pas séparé du reste car le programme est très petit
# par contre, quand je vais coder le convertisseur, je scinderai les fichiers pour une meilleure compréhension

from PySide import QtGui, QtCore
from functools import partial

class MaCalculatrice(QtGui.QWidget):
    def __init__(self):
        super(MaCalculatrice, self).__init__()


        self.setupUi(tabwidget)
        self.modificationSetupUi()
        self.setupConnections()
        self.setupRaccourcisClaviers()


    def setupUi(self, tabwidget):                               # création de la fonction pour tout ce qui est graphique

        tabwidget.setWindowTitle('La super calculatrice')       # doner un nom à l'application ici tabwidget
        w = h = 500
        tabwidget.move(1920 / 2 - w / 2, 1080 / 2 - h / 2)
        tabwidget.setObjectName("tabwidget")                    # Nomme l'objet
        tabwidget.resize(300, 320)                              # taille de ma fenetre en onglet
        tabwidget.setMinimumSize(QtCore.QSize(290, 320))        # taille minimum de ma fenetre en onglet

        self.calculatrice = QtGui.QWidget()
        self.convertisseur = QtGui.QWidget()

        self.calculatrice.setObjectName("calculatrice")         # Nomme l'objet calculatrice
        self.convertisseur.setObjectName("convertisseur")

        #layout = QtGui.QGridLayout(self)                         au lieu  de layout = QtGui.QGridLayout(QtGui.QWidget())
        tabwidget.addTab(self.calculatrice, "Calculatrice")     # création d'un onglet Calculatrice
        tabwidget.addTab(self.convertisseur, "Convertisseur")   # création d'un autre onglet Convertisseur

        # Onglet calculatrice

        self.gridLayout = QtGui.QGridLayout(self.calculatrice)  # rajoute un gridlayout sur l'onglet calculatrice
        self.calculatrice.setMinimumSize(QtCore.QSize(0, 0))

        self.btn_1 = QtGui.QPushButton('1', self.calculatrice)        # assigne btn_1 à calculatrice
        #self.btn_1.setObjectName("btn_1")                        # nomme btn_1 mais pas utile dans ce cas de figure
        self.gridLayout.addWidget(self.btn_1, 6, 0, 1, 1)        # indique l'endroit sur le gridLayout
        self.btn_1.setMinimumSize(QtCore.QSize(52, 52))          # indique la taille du bouton

        self.btn_2 = QtGui.QPushButton('2', self.calculatrice)
        #self.btn_2.setObjectName("btn_2")
        self.gridLayout.addWidget(self.btn_2, 6, 1, 1, 1)
        self.btn_2.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_3 = QtGui.QPushButton('3', self.calculatrice)
        #self.btn_3.setObjectName("btn_3")
        self.gridLayout.addWidget(self.btn_3, 6, 2, 1, 1)
        self.btn_3.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_4 = QtGui.QPushButton('4', self.calculatrice)
        #self.btn_4.setObjectName("btn_4")
        self.gridLayout.addWidget(self.btn_4, 5, 0, 1, 1)
        self.btn_4.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_5 = QtGui.QPushButton('5', self.calculatrice)
        #self.btn_5.setObjectName("btn_5")
        self.gridLayout.addWidget(self.btn_5, 5, 1, 1, 1)
        self.btn_5.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_6 = QtGui.QPushButton('6', self.calculatrice)
        #self.btn_6.setObjectName("btn_6")
        self.gridLayout.addWidget(self.btn_6, 5, 2, 1, 1)
        self.btn_6.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_7 = QtGui.QPushButton('7', self.calculatrice)
        #self.btn_7.setObjectName("btn_7")
        self.gridLayout.addWidget(self.btn_7, 4, 0, 1, 1)
        self.btn_7.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_8 = QtGui.QPushButton('8', self.calculatrice)
        #self.btn_8.setObjectName("btn_8")
        self.gridLayout.addWidget(self.btn_8, 4, 1, 1, 1)
        self.btn_8.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_9 = QtGui.QPushButton('9', self.calculatrice)
        #self.btn_9.setObjectName("btn_9")
        self.gridLayout.addWidget(self.btn_9, 4, 2, 1, 1)
        self.btn_9.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_0 = QtGui.QPushButton('0', self.calculatrice)
        #self.btn_0.setObjectName("btn_0")
        self.gridLayout.addWidget(self.btn_0, 7, 0, 1, 1)
        self.btn_0.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_00 = QtGui.QPushButton('00', self.calculatrice)
        #self.btn_00.setObjectName("btn_00")
        self.gridLayout.addWidget(self.btn_00, 7, 1, 1, 1)
        self.btn_00.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_point = QtGui.QPushButton('.', self.calculatrice)
        #self.btn_point.setObjectName("btn_point")
        self.gridLayout.addWidget(self.btn_point, 7, 2, 1, 1)
        self.btn_point.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_egal = QtGui.QPushButton('=', self.calculatrice)
        #self.btn_egal.setObjectName("btn_egal")
        self.gridLayout.addWidget(self.btn_egal, 7, 5, 1, 2)
        self.btn_egal.setMinimumSize(QtCore.QSize(106, 52))

        self.btn_plus = QtGui.QPushButton('+', self.calculatrice)
        #self.btn_plus.setObjectName("btn_plus")
        self.gridLayout.addWidget(self.btn_plus, 6, 5, 1, 1)
        self.btn_plus.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_moins = QtGui.QPushButton('-', self.calculatrice)
        #self.btn_moins.setObjectName("btn_moins")
        self.gridLayout.addWidget(self.btn_moins, 6, 6, 1, 1)
        self.btn_moins.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_multi = QtGui.QPushButton('*', self.calculatrice)
        #self.btn_multi.setObjectName("btn_multi")
        self.gridLayout.addWidget(self.btn_multi, 5, 5, 1, 1)
        self.btn_multi.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_divi = QtGui.QPushButton('/', self.calculatrice)
        #self.btn_divi.setObjectName("btn_divi")
        self.gridLayout.addWidget(self.btn_divi, 5, 6, 1, 1)
        self.btn_divi.setMinimumSize(QtCore.QSize(52, 52))

        self.btn_c = QtGui.QPushButton('C', self.calculatrice)
        #self.btn_c.setObjectName("btn_c")
        self.gridLayout.addWidget(self.btn_c, 4, 5, 1, 2)
        self.btn_c.setMinimumSize(QtCore.QSize(106, 52))

        self.operation = QtGui.QLineEdit(self.calculatrice)
        #self.operation.setObjectName("operation")
        self.gridLayout.addWidget(self.operation, 0, 0, 1, 7)


        self.resultat = QtGui.QLineEdit('0', self.calculatrice)
        #self.resultat.setObjectName("resultat")
        self.gridLayout.addWidget(self.resultat, 1, 0, 2, 7)
        self.resultat.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter) #alignement texte
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setWeight(75)
        font.setBold(True)
        self.resultat.setFont(font)
        spacerItem1 = QtGui.QSpacerItem(15, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 3, 0, 1, 7)

        spacerItem2 = QtGui.QSpacerItem(1, 223, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 4, 4, 4, 1)



    def modificationSetupUi(self):

        # le but ici est de déterminer si le bouton est de type nombre
        # pour pouvoir afficher le nombre en arguments de clicked
        # cela évite de connecter les boutons un à un
        # Pour cela, c'est la fonction isdigit qui va savoir si c'est un nombre
        # si le pushbutton est bien un nombre, alors cela l'ajoute à la liste btns_nombres
        # dont on s'en servira dans la fonction setupConnections

        self.btns_nombres = []

        for i in range(self.gridLayout.count()):
            widget = self.gridLayout.itemAt(i).widget()

            if isinstance(widget, QtGui.QPushButton) and widget.text().isdigit():
                self.btns_nombres.append(widget)

    def setupConnections(self):
        for btn in self.btns_nombres:
            btn.clicked.connect(partial(self.btnNombreClicked, str(btn.text())))

        self.btn_moins.clicked.connect(partial(self.btnOperationPressed, str(self.btn_moins.text())))
        self.btn_plus.clicked.connect(partial(self.btnOperationPressed, str(self.btn_plus.text())))
        self.btn_multi.clicked.connect(partial(self.btnOperationPressed, str(self.btn_multi.text())))
        self.btn_divi.clicked.connect(partial(self.btnOperationPressed, str(self.btn_divi.text())))

        self.btn_egal.clicked.connect(self.calculOperation)
        self.btn_c.clicked.connect(self.supprimerResultat)


    def setupRaccourcisClaviers(self):
        # On fait une boucle de 0 a 9 pour passer a travers les boutons de nombres
        for btn in range(10):
            # On cree un shortcut pour chaque bouton
            QtGui.QShortcut(QtGui.QKeySequence(str(btn)), self, partial(self.btnNombreClicked, str(btn)))

        # On cree plusieurs shortcuts pour les boutons d'operation
        QtGui.QShortcut(QtGui.QKeySequence(str(self.btn_plus.text())), self,
                        partial(self.btnOperationPressed, str(self.btn_plus.text())))
        QtGui.QShortcut(QtGui.QKeySequence(str(self.btn_moins.text())), self,
                        partial(self.btnOperationPressed, str(self.btn_moins.text())))
        QtGui.QShortcut(QtGui.QKeySequence(str(self.btn_multi.text())), self,
                        partial(self.btnOperationPressed, str(self.btn_multi.text())))
        QtGui.QShortcut(QtGui.QKeySequence(str(self.btn_divi.text())), self,
                        partial(self.btnOperationPressed, str(self.btn_divi.text())))

        # On cree d'autres shortcuts pour l'application en general
        QtGui.QShortcut(QtGui.QKeySequence('Enter'), self, self.calculOperation)
        QtGui.QShortcut(QtGui.QKeySequence('Del'), self, self.supprimerResultat)
        QtGui.QShortcut(QtGui.QKeySequence('Esc'), self, self.close)

    def btnNombreClicked(self, bouton):
        """Fonction activee quand l'utilisateur appuie sur un numero (0-9)"""

        # On recupere le texte dans le LineEdit resultat
        resultat = str(self.resultat.text())

        if resultat == '0':
            # Si le resultat est egal a 0 on met le nombre du bouton
            # que l'utilisateur a presse dans le LineEdit resultat
            self.resultat.setText(bouton)
        else:
            # Si le resultat contient autre chose que zero,
            # On ajoute le texte du bouton a celui dans le LineEdit resultat
            self.resultat.setText(resultat + bouton)


    def btnOperationPressed(self, operation):
        """
        Fonction activee quand l'utilisateur appuie sur
        une touche d'operation (+, -, /, *)
        """

        # On recupere le texte dans le LineEdit operation
        operationText = str(self.operation.text())
        # On recupere le texte dans le LineEdit resultat
        resultat = str(self.resultat.text())

        # On additionne l'operation en cours avec le texte dans le resultat
        # et on ajoute a la fin le signe de l'operation qu'on a choisie
        self.operation.setText(operationText + resultat + operation)
        # On reset le texte du LineEdit resultat
        self.resultat.setText('0')


    def supprimerResultat(self):
        """On reset le texte des deux LineEdit"""

        self.resultat.setText('0')
        self.operation.setText('')


    def calculOperation(self):
        """On calcule le resultat de l'operation en cours (quand l'utilisateur appuie sur egal)"""

        # On recupere le texte dans le LineEdit resultat
        resultat = str(self.resultat.text())

        # On ajoute le nombre actuel dans le LineEdit resultat
        # au LineEdit operation
        self.operation.setText(self.operation.text() + resultat)

        # On evalue le resultat de l'operation
        resultatOperation = eval(str(self.operation.text()))

        # On met le resultat final dans le LineEdit resultat
        self.resultat.setText(str(resultatOperation))




app = QtGui.QApplication([])
tabwidget = QtGui.QTabWidget()

MaCalculatrice()
tabwidget.show()

app.exec_()